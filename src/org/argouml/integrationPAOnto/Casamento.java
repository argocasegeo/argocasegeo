/*
 * Casamento.java
 *
 * Created on 8 de Outubro de 2007, 14:22
 */

package org.argouml.integrationPAOnto;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import jena.examples.ontology.classHierarchy.ClassHierarchy;

import org.argouml.integrationPAOnto.utilities.ItemGenerated;
import org.argouml.integrationPAOnto.utilities.ItemLista;
import org.argouml.integrationPAOnto.utilities.OntClassAlterado;
import org.argouml.integrationPAOnto.utilities.WriteXML;


import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;


/**
 *
 * @author  Gabriel
 */
public class Casamento extends javax.swing.JFrame {
    
	private String paPath;
	private String ontoFile;
	private String[] arquivos;
	
	private int contadorAp = 0;
	private int contadorOnto = 0;
	
    /** Creates new form Casamento */
    public Casamento() {
        super("AP and Onto Integration");
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textFieldOWL = new javax.swing.JTextField();
        jButtonFindOnto = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textFieldAP = new javax.swing.JTextField();
        jButtonFindAP = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboBoxPattern = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        textFieldXMI = new javax.swing.JTextField();
        jButtonConfirm = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTreePatternClasses = new javax.swing.JTree(new DefaultMutableTreeNode("Escolha um Padrão..."));
        jLabel4 = new javax.swing.JLabel();
        jTreeOntologyClasses = new javax.swing.JTree(new DefaultMutableTreeNode("Escolha uma Ontologia..."));
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableIntegration = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        
        jScrollPane3 = new JScrollPane();
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane4 = new JScrollPane();
        
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Analysis Patterns and Ontologies Integration");
        setResizable(false);
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Analysis Patterns and Ontologies Integration");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(155, 155, 155)
                .add(jLabel1)
                .addContainerGap(161, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setForeground(new java.awt.Color(0, 153, 0));
        jLabel2.setText("Integration Ontology (OWL) file:");

        jButtonFindOnto.setText("...");
        jButtonFindOnto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindOntoActionPerformed(evt);
            }
        });

        jLabel8.setText("Analysis Pattern path:");

        jButtonFindAP.setText("...");
        jButtonFindAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindAPActionPerformed(evt);
            }
        });

        jLabel3.setText("Pattern:");
        
        comboBoxPattern.addActionListener( new ComboHandler( comboBoxPattern ) );      

        jLabel9.setText("Pattern (XMI) file:");

        textFieldXMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldXMIActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(jLabel8)
                    .add(jLabel9)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, textFieldOWL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                            .add(textFieldAP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonFindAP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonFindOnto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, textFieldXMI, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                            .add(comboBoxPattern, 0, 540, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jButtonFindAP)
                    .add(textFieldAP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(comboBoxPattern, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(textFieldXMI, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jButtonFindOnto)
                    .add(textFieldOWL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonConfirm.setText("Confirm");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Pattern Classes:");

        jLabel5.setText("Ontology Classes:");

        jTableIntegration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][][] {},
            new String [] {
                "Pattern ", "Pattern Classes", "Onto References"
            }
        ){
        	public boolean isCellEditable(int rowIndex, int mColIndex){   
        	    return false;   
        	}
        }
        
        
        );
        jScrollPane2.setViewportView(jTableIntegration);
        
        
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);
        
        jScrollPane3.setViewportView( jTreeOntologyClasses );
        jScrollPane4.setViewportView( jTreePatternClasses );
        
        jLabel6.setText("Description:");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(17, 17, 17)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(16, 16, 16)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel6)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                            .add(jLabel5))))
                .add(10, 10, 10))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jLabel5))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(26, 26, 26)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jButtonCancel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonConfirm)
                        .add(37, 37, 37))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonConfirm)
                    .add(jButtonCancel))
                .addContainerGap())
        );
        
  
        pack();
    }// </editor-fold>
    
    private void jButtonFindAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindAPActionPerformed
    	
    	/*
    	 * Abre o navegador de diretorios para que o usuario escolha
    	 * o caminho da pasta dos Padroes de Analise
    	 * */
    	JFileChooser navegadorDiretorios = new JFileChooser();
		navegadorDiretorios.setDialogTitle("Select the Analysis Pattern directory");
		navegadorDiretorios.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		

		
		int result = navegadorDiretorios.showOpenDialog(null);
		
		if (result == JFileChooser.CANCEL_OPTION) {	return; }
		comboBoxPattern.removeAllItems();
		jTreePatternClasses.removeAll();
		File nomeDiretorio = navegadorDiretorios.getSelectedFile();
		
		paPath = nomeDiretorio.getAbsolutePath();     
		
		if (result == JFileChooser.APPROVE_OPTION) { 
			textFieldAP.setText(paPath);
		}
		
		/*
		 * Agora passa o nome das pastas do diretorio pro comboBoxPattern!!!
		 */
		arquivos = nomeDiretorio.list();
		File[] listaArquivos = nomeDiretorio.listFiles();

		for(File a : listaArquivos ){
			if(a.getName().toLowerCase().endsWith(".xmi"))
				comboBoxPattern.addItem(a.getName());

		}
		
		constroiArvorePA();
		
		
    }//GEN-LAST:event_jButtonFindAPActionPerformed
    
    private void constroiArvorePA(){
    	
    	//código para construir a árvore jTreePatternClasses
    	jTreePatternClasses.removeAll();
		ArrayList<ItemLista> lista = new ArrayList<ItemLista>();
		
		int inteiroDoPai = 0;
		
		try {
			FileReader reader = new FileReader(paPath +"\\"+ comboBoxPattern.getSelectedItem());
			BufferedReader buffer = new BufferedReader(reader);
			
			String linha = null;
			String aux = null;
			
			while( buffer.ready() ) {
				linha = buffer.readLine();
				
				//Esse if serve para eliminar os Class do ArgoCaseGeo
				if(linha.contains("<Foundation.Core.Class "))
					while( !linha.contains("</Foundation.Core.Class>") )
						linha = buffer.readLine();
				else
				if(linha.contains("<Foundation.Core.ModelElement.name>")){
					aux = linha.substring(linha.indexOf(">") + 1, linha.indexOf(">") + 2);
					char inic = aux.toCharArray()[0];
					if( Character.isUpperCase( inic )){
						
						ItemLista item = constroiObjeto(linha);
						lista.add(item);
						
						//System.out.println(linha);
					}//fim do if
				}
				
			}//fim do while
			
			//nesse ponto a lista esta construida
			
			HashMap<Integer, DefaultMutableTreeNode> mapa = new HashMap<Integer, DefaultMutableTreeNode>();
			
			DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(lista.get(0).getNome());
			
			DefaultTreeModel modelo = new DefaultTreeModel(raiz);
			JTree arvore = new JTree(modelo);
			
			mapa.put(lista.get(0).getEspaco(), raiz);
			
			DefaultMutableTreeNode ref = raiz; 
		
			for(int i = 1; i < lista.size(); i++){
				
				ItemLista il = lista.get(i);
				DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(il.getNome());
				ref.add( nodo );
				
				if(i+1 < lista.size() && lista.get(i+1).getEspaco() > il.getEspaco() ){
					ref = nodo;
					mapa.put(il.getEspaco(), nodo);
					inteiroDoPai = il.getEspaco();
				}//fim do if
				else
					if( i+1 < lista.size() && lista.get(i+1).getEspaco() < il.getEspaco()){
						//TODO - aqui esta a parte do algoritmo que adiciona na raiz
						ref = mapa.get( lista.get(0).getEspaco() );
					}
			
			}//fim do for
			
			//nesse ponto a árvore deve estar construida
			
			jTreePatternClasses = arvore;
			
			jScrollPane4.setViewportView( jTreePatternClasses );
			
			
			System.out.println("Programa terminou com sucesso");
			
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(this, "File not found!\nTry again.", "File error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
        //adicionando ouvinte
		 MouseListener ml = new MouseAdapter() {
		     public void mousePressed(MouseEvent e) {
		         int selRow = jTreePatternClasses.getRowForLocation(e.getX(), e.getY());
		         TreePath selPath = jTreePatternClasses.getPathForLocation(e.getX(), e.getY());
		         if(selRow != -1) {
		            if(e.getClickCount() == 2) {
		            	if (contadorAp >= jTableIntegration.getRowCount()) {
		            		DefaultTableModel modelo = (DefaultTableModel) jTableIntegration.getModel();
		            		modelo.addRow(new Object[]{ null, null });
		            	}	
		            	DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTreePatternClasses.getLastSelectedPathComponent();
		            	TableModel modelo = jTableIntegration.getModel();
		            	modelo.setValueAt(node.toString(), contadorAp, 1);
		            	modelo.setValueAt( comboBoxPattern.getSelectedItem().toString(), contadorAp, 0);
		            	contadorAp++;
		            	 
		            }//fim do if interno
		         }//fim do if externo
		     }//fim do mousePressed
		 };
		 
		 jTreePatternClasses.addMouseListener(ml);
	
    	
    }//fim do constroiArvorePA
    
    
	private ItemLista constroiObjeto( String linha ){
		
		String dentroDoTag = linha.substring(linha.indexOf(">")+1, linha.indexOf("</"));
		int espaco = ( linha.substring(0, linha.indexOf("<"))).length();

		return new ItemLista(dentroDoTag, espaco);
		
	}//fim do constroiObjeto
    
    
    
    private void jButtonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmActionPerformed
    	
    	if( contadorAp != 0 && contadorOnto != 0 && contadorAp == contadorOnto ){
    		ArrayList<ItemGenerated> lista = new ArrayList<ItemGenerated>();
    		String padrao = textFieldXMI.getText();
    		String classeDoPadrao = null;
    		String ontologia = ontoFile;
    		String classeDaOntologia = null;
    		
    		for(int i = 0; i < contadorAp ; i++){
    			
    			padrao = (String)jTableIntegration.getModel().getValueAt(i, 0);
    			classeDoPadrao = (String)jTableIntegration.getModel().getValueAt(i, 1);
    			classeDaOntologia = (String)jTableIntegration.getModel().getValueAt(i, 2);
    			
    			lista.add( new ItemGenerated(padrao, classeDoPadrao, ontologia, classeDaOntologia) );
    			
    		}//fim do for
    		
    		//geração do arquivo saida.xml
    		WriteXML.gravaXML(lista);
    		
    		JOptionPane.showMessageDialog(this, "The XML file has been generated succesfuly!", "XML Generation", JOptionPane.INFORMATION_MESSAGE);
    		
    	}else{
    		JOptionPane.showMessageDialog(this, "The IntegrationTable is incorrect.\nPlease fix it and try again.", "Error", JOptionPane.ERROR_MESSAGE);
    	}
    	
    }//GEN-LAST:event_jButtonConfirmActionPerformed
    
    private void textFieldXMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldXMIActionPerformed
    }//GEN-LAST:event_textFieldXMIActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        //System.exit(0);
    	
    	 dispose();
        
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonFindOntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindOntoActionPerformed
    	JFileChooser navegadorDiretorios2 = new JFileChooser();
		navegadorDiretorios2.setDialogTitle("Select the Ontology OWL file");
		navegadorDiretorios2.setFileSelectionMode(JFileChooser.FILES_ONLY);
		navegadorDiretorios2.setFileFilter(new 
			javax.swing.filechooser.FileFilter()
			{
				public boolean accept(File f)
				{  
					return f.isDirectory()
						|| f.getName().toLowerCase().endsWith(".owl");
				}
				public String getDescription()
				{  
					return "OWL files";
				}
			});
		
		
		int result = navegadorDiretorios2.showOpenDialog(null);
		if (result == JFileChooser.CANCEL_OPTION)
		{	
			return;
		}
			
		File nomeArquivo = navegadorDiretorios2.getSelectedFile(); 
		ontoFile = nomeArquivo.getAbsolutePath(); 
		
		
		if (result == JFileChooser.APPROVE_OPTION)
		{
			textFieldOWL.setText(ontoFile);
		}
		
		ontoFile = nomeArquivo.getName();
		
		/*
		 * Trecho do codigo que faz a leitura do arquivo OWl
		 * e faz uso do framework JENA  
		 */
		
		OntModel m = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM, null );
		
	    m.getDocumentManager().addAltEntry( "http://www.owl-ontologies.com/unnamed.owl",
	    		"file:"+nomeArquivo); //ontoFile

	    m.read( "http://www.owl-ontologies.com/unnamed.owl" );

	    ClassHierarchy aux = new ClassHierarchy();
	    
	    aux.showHierarchy(System.out, m);
	    jTreeOntologyClasses.removeAll();
	    
	    
	    jTreeOntologyClasses = new JTree(aux.getModelo());
        
        //adicionando ouvinte para seleção
	    jTreeOntologyClasses.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTreeOntologyClasses.addTreeSelectionListener( new TreeSelectionListener(){

			public void valueChanged(TreeSelectionEvent e) {
				DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTreeOntologyClasses.getLastSelectedPathComponent();
				if(node != null && !node.isRoot()){
					jTextArea1.setText( (((OntClassAlterado)node.getUserObject()).getOntClass()).getComment(null) );
				}
				
			}//fim do valueChanged
        });
        
      //adicionando ouvinte para mouse
		 MouseListener ml = new MouseAdapter() {
		     public void mousePressed(MouseEvent e) {
		         int selRow = jTreeOntologyClasses.getRowForLocation(e.getX(), e.getY());
		         //TreePath selPath = jTreeOntologyClasses.getPathForLocation(e.getX(), e.getY());
		         if(selRow != -1) {
		            if(e.getClickCount() == 2) {
		            	if (contadorOnto >= jTableIntegration.getRowCount()) {
		            		DefaultTableModel modelo = (DefaultTableModel) jTableIntegration.getModel();
		            		modelo.addRow(new Object[]{ null, null });
		            	}	
		            	DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTreeOntologyClasses.getLastSelectedPathComponent();
		            	TableModel modelo = jTableIntegration.getModel();
		            	modelo.setValueAt(node.toString(), contadorOnto, 2);
		            	contadorOnto++;
		            	 
		            }//fim do if interno
		         }//fim do if externo
		     }//fim do mousePressed
		 };
		 
		 jTreeOntologyClasses.addMouseListener(ml);
	    
	    jScrollPane3.setViewportView( jTreeOntologyClasses );
	    
		
    }//GEN-LAST:event_jButtonFindOntoActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Casamento().setVisible(true);
            }
        });
    }
    
    private javax.swing.JComboBox comboBoxPattern;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JButton jButtonFindAP;
    private javax.swing.JButton jButtonFindOnto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableIntegration;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTreeOntologyClasses;
    private javax.swing.JTree jTreePatternClasses;
    private javax.swing.JTextField textFieldAP;
    private javax.swing.JTextField textFieldOWL;
    private javax.swing.JTextField textFieldXMI;
    
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    
    public void setTitle(String title) {
    }
    
    
    private class ComboHandler implements ActionListener{

    	private JComboBox box;
    	
    	public ComboHandler( JComboBox box ){
    		this.box = box;
    	}
    	
		public void actionPerformed(ActionEvent e) {
			
			/*
			 * Supor que todos os arquivos XMI 
			 * tem a terminação ('_.xmi')
			 */
			if(box.getSelectedItem() != null){
				textFieldXMI.setText(box.getSelectedItem().toString());
				constroiArvorePA();
			}//fim do if
		}
    	
    	
    }
    
    
}
